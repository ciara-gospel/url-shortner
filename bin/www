#!/usr/bin/env node

import app from '../app.js';
import debug from 'debug';
import http from 'http';
import { initializeDbSchema, connectToDb, pool } from '../config/db.js';
import logger from '../utils/logger.js';

const log = debug('url-shortener:server');
const port = normalizePort(process.env.PORT || '3500');
app.set('port', port);

const server = http.createServer(app);

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

const signals = ['SIGHUP', 'SIGINT', 'SIGTERM'];
let shuttingDown = false;

async function shutdown(signal) {
  if (shuttingDown) {
    logger.info(`Already shutting down. Received ${signal}`);
    return;
  }

  shuttingDown = true;
  logger.info(`Received ${signal}. Shutting down gracefully`);

  try {
    await pool.end();
    logger.info('Database pool closed');
  } catch (err) {
    logger.error('Error closing database pool', err);
  }

  server.close((err) => {
    if (err) {
      logger.error('Error closing server', err);
      process.exit(1);
    }
    logger.info('Server closed. Exiting process');
    process.exit(0);
  });
}

signals.forEach(signal => process.on(signal, () => shutdown(signal)));

function onError(error) {
  if (error.syscall !== 'listen') throw error;

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  switch (error.code) {
    case 'EACCES':
      logger.error(`${bind} requires elevated privileges`);
      process.exit(1);
    case 'EADDRINUSE':
      logger.error(`${bind} is already in use`);
      process.exit(1); // don't just retry silently
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  log(`Listening on ${bind}`);
  console.log(`ðŸš€ Server running at http://localhost:${port}/`);
}

async function startServer() {
  try {
    logger.info(`Attempting to start server on port ${port}`);
    await connectToDb();
    await initializeDbSchema();
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  } catch (error) {
    logger.error('Failed during server startup:', error);
    process.exit(1);
  }
}

startServer();
